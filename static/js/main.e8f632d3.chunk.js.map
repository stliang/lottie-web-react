{"version":3,"sources":["lottie/index.js","lottie/lottieConstants.js","demo/demoConstants.js","demo/demo.js","index.js"],"names":["Lottie","props","id","options","eventListeners","playingState","className","direction","speed","goToAndPlay","playSegments","useState","lottieInstance","setLottieInstance","lottieConfig","setLottieConfig","lottieContainer","useRef","isAnimationMissing","setAnimationMissing","useReducer","state","action","checkObjectsEqualByValue","object1","object2","object_keys","_","keys","i","length","key","has","isObject","lottieConstants","newOptions","path","animationData","destroy","lottieOptions","dispatch","useEffect","newConfig","container","current","newInstance","lottie","loadAnimation","removeEventListeners","useCallback","forEach","eventListener","removeEventListener","eventName","callback","addEventListeners","addEventListener","play","pause","stop","setDirection","setSpeed","value","isFrame","segments","forceFlag","ref","defaultOptions","renderer","loop","autoplay","require","rendererSettings","preserveAspectRatio","defaultProps","uuid4","globeLottieExampleOptions","watchAnimationData","Demo","setPlayingState","loopCounter","setLoopCounter","setAutoplay","setLoop","setPath","setAnimationData","onClick","type","checked","onChange","e","target","JSON","stringify","parse","maxLength","min","max","demoConstants","font","AppHook","ReactDOM","render","document","getElementById"],"mappings":"ml2GAmBA,SAASA,EAAOC,GAAQ,IAEdC,EAAsGD,EAAtGC,GAAIC,EAAkGF,EAAlGE,QAASC,EAAyFH,EAAzFG,eAAgBC,EAAyEJ,EAAzEI,aAAcC,EAA2DL,EAA3DK,UAAWC,EAAgDN,EAAhDM,UAAWC,EAAqCP,EAArCO,MAAOC,EAA8BR,EAA9BQ,YAAaC,EAAiBT,EAAjBS,aAFxE,EAGuBC,mBAAS,MAHhC,mBAGdC,EAHc,KAGEC,EAHF,OAImBF,mBAAS,MAJ5B,mBAIdG,EAJc,KAIAC,EAJA,KAKfC,EAAkBC,iBAAO,MALV,EAM6BN,oBAAS,GANtC,mBAMdO,EANc,KAMMC,EANN,OAOaC,sBAGlC,SAA0BC,EAAOC,GAK/B,OCxBoC,SAA3BC,EAA4BC,EAASC,GAMhD,IAFA,IACMC,EAAcC,IAAEC,KAAKJ,GAClBK,EAAI,EAAGA,EAAIH,EAAYI,OAAQD,IAAK,CAC3C,IAAIE,EAAML,EAAYG,GACtB,IAAIF,IAAEK,IAAIP,EAASM,GASjB,OAAO,EARP,GAAIJ,IAAEM,SAASR,EAAQM,IACrB,OAAOR,EAAyBC,EAAQO,GAAMN,EAAQM,IAEnD,GAAIP,EAAQO,KAASN,EAAQM,GAChC,OAAO,EAOb,OAhBe,EDmBWG,CAAyCZ,EAAOa,WAAYd,GAe3EA,GAbFC,EAAOa,WAAWC,MAASd,EAAOa,WAAWE,cAIhDlB,GAAoB,GAHpBA,GAAoB,IAKjBE,EAAMe,MAAQf,EAAMgB,gBAAkBzB,GAEzCA,EAAe0B,UAEVhB,EAAOa,cAnB6C,IAP1C,mBAOdI,EAPc,KAOCC,EAPD,KAkCrBC,qBAAU,WACRD,EAAS,CAAEL,WAAYhC,MACtB,CAACA,IAGJsC,qBAAU,WACR,GAAIF,IAAkBA,EAAcF,eAAiBE,EAAcH,MAAO,CACxE,IAAIM,EAAS,eAAQH,EAAR,CAAuBI,UAAW3B,EAAgB4B,UAC3DF,EAAUN,aAELM,EAAUL,cAEnBtB,EAAgB2B,MAEjB,CAACH,IAIJE,qBAAU,WACR,GAAI3B,GAAgBA,EAAa6B,UAAW,CAC1C,IAAME,EAAcC,IAAOC,cAAcjC,GACzCD,EAAkBgC,MAEnB,CAAC/B,IAIJ,IAAMkC,EAAuBC,uBAC3B,WACE,GAAIrC,EAKF,OAJAR,EAAe8C,SAAQ,SAACC,GACtBvC,EAAewC,oBAAoBD,EAAcE,UAAWF,EAAcG,aAGrE,kBAAM1C,EAAe0B,aAGhC,CAAC1B,EAAgBR,IAIbmD,EAAoBN,uBACxB,WACMrC,GAAkBR,GACpBA,EAAe8C,SAAQ,SAACC,GACtBvC,EAAe4C,iBAAiBL,EAAcE,UAAWF,EAAcG,eAI7E,CAAClD,EAAgBQ,IA4DnB,OAzDA6B,qBAAU,WAGR,OAFAc,IAEO,kBAAMP,QAMfP,qBAAU,WACJ7B,IC/GY,SDgHVP,EACFO,EAAe6C,OChHF,UDkHNpD,EACPO,EAAe8C,QClHH,SDoHLrD,GACPO,EAAe+C,UAGlB,CAACtD,EAAcO,IAIlB6B,qBAAU,WACJ7B,GAAkBL,GACpBK,EAAegD,aAAarD,KAE7B,CAACA,EAAWK,IAIf6B,qBAAU,WACJ7B,GAAkBJ,GACpBI,EAAeiD,SAASrD,KAEzB,CAACA,EAAOI,IAIX6B,qBAAU,WACJ7B,GAAkBH,GAAeA,EAAYqD,OAASrD,EAAYsD,SACpEnD,EAAeH,YAAYA,EAAYqD,MAAOrD,EAAYsD,WAE3D,CAACtD,EAAaG,IAIjB6B,qBAAU,WACJ7B,GAAkBF,GAAgBA,EAAasD,UAAYtD,EAAauD,WAC1ErD,EAAeH,YAAYC,EAAasD,SAAUtD,EAAauD,aAEhE,CAACvD,EAAcE,IAKhB,yBAAKV,GAAIA,EAAIgE,IAAKlD,EAAiBV,UAAWA,GAC3CY,GAAsB,2BClKG,uGDuKhC,IAAMiD,EAAiB,CACrBC,SAAU,MACVC,MAAM,EACNC,UAAU,EACVjC,cAxKkBkC,EAAQ,IAyK1BC,iBAAkB,CAChBC,oBAAqB,mBAKzBzE,EAAO0E,aAAe,CACpBxE,GAAIyE,MACJxE,QAASgE,EACT/D,eAAgB,GAChBC,aClLkB,ODmLlBE,UAAW,EACXC,MAAO,EACPC,YAAa,KACbC,aAAc,MAGDV,QE/LF4E,G,MAA4B,CACvCR,SAAU,MACVC,MAAM,EACNC,UAAU,EACVlC,KAAM,sEACNC,cAAe,KACfmC,iBAAkB,CAChBC,oBAAqB,oBAKZD,EAAmB,CAC9BC,oBAAqB,kBCTnBI,EAAqBN,EAAQ,IAwFlBO,MAtFf,WAAiB,IAAD,EAC0BnE,mBAAS,QADnC,mBACPN,EADO,KACO0E,EADP,OAEwBpE,mBAAS,GAFjC,mBAEPqE,EAFO,KAEMC,EAFN,OAGkBtE,oBAAS,GAH3B,mBAGP2D,EAHO,KAGGY,EAHH,OAIUvE,oBAAS,GAJnB,mBAIP0D,EAJO,KAIDc,EAJC,OAKUxE,mBAAS,wGALnB,mBAKPyB,EALO,KAKDgD,EALC,OAM4BzE,mBAASkE,GANrC,mBAMPxC,EANO,KAMQgD,EANR,OAOY1E,mBAAS,GAPrB,mBAOPH,EAPO,KAOAqD,EAPA,OAQoBlD,mBAAS,GAR7B,mBAQPJ,EARO,KAQIqD,EARJ,KAUd,OACE,yBAAKtD,UAAU,QACb,iDACA,gDACA,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,cACb,4CACA,6BACE,4BAAQgF,QAAS,kBAAMP,EAAgB,UAAvC,QACA,4BAAQO,QAAS,kBAAMP,EAAgB,WAAvC,SACA,4BAAQO,QAAS,kBAAMP,EAAgB,UAAvC,SAEF,wCACA,2BAAOzE,UAAU,UACf,2BAAOiF,KAAK,WAAWC,QAASlB,EAAUmB,SAAU,kBAAMP,GAAaZ,MACvE,0BAAMhE,UAAU,kBAElB,oCACA,2BAAOA,UAAU,UACf,2BAAOiF,KAAK,WAAWC,QAASnB,EAAMoB,SAAU,kBAAMN,GAASd,MAC/D,0BAAM/D,UAAU,kBAElB,oCACA,2BAAOA,UAAU,QAAQwD,MAAO1B,EAAMqD,SAAU,SAACC,GAAD,OAAON,EAAQM,EAAEC,OAAO7B,UACxE,6CACA,8BACExD,UAAU,YACVwD,MAAO8B,KAAKC,UAAUxD,GACtBoD,SAAU,SAACC,GAAD,OAAOA,EAAEC,OAAO7B,OAASuB,EAAiBO,KAAKE,MAAMJ,EAAEC,OAAO7B,WAE1E,qCACA,2BAAOxD,UAAU,QAAQwD,MAAOtD,EAAOiF,SAAU,SAACC,GAAD,OAAO7B,EAAS6B,EAAEC,OAAO7B,UAC1E,yCACA,2BACEyB,KAAK,SACLjF,UAAU,QACVwD,MAAOvD,EACPwF,UAAW,EACXC,IAAI,KACJC,IAAI,IACJR,SAAU,SAACC,GAAD,OAAO9B,EAAa8B,EAAEC,OAAO7B,WAE3C,6BACE,kBAAC,EAAD,CACE3D,QAAS,CACPiE,SDlDS,MCmDTC,KAAMA,EACNC,SAAUA,EACVlC,KAAMA,EACNC,cAAeA,EACfmC,iBAAkB0B,GAEpB7F,aAAcA,EACdG,MAAOA,EACPD,UAAWA,MAIjB,wBAAI4F,KAAK,UAAT,+BACA,yBAAK7F,UAAU,kBACb,wBAAIA,UAAU,kBAAd,gBAA6C0E,GAC7C,kBAAC,EAAD,CACE1E,UAAU,wBACVH,QAAS+F,EACT7F,aAAc,OACdD,eAAgB,CAAC,CACfiD,UAAW,eACXC,SAAU,WAAQ2B,EAAeD,EAAc,WC3E3D,SAASoB,IAEP,OACE,kBAAC,EAAD,MAGWA,YAEfC,IAASC,OAAO,kBAACF,EAAD,MAAaG,SAASC,eAAe,U","file":"static/js/main.e8f632d3.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState, useCallback, useReducer } from 'react'\nimport PropTypes from 'prop-types'\nimport uuid4 from 'uuid/v4'\nimport lottie from 'lottie-web'\nimport * as lottieConstants from './lottieConstants'\nlet animationData = require('./exampleAnimation.json')\n\nconst propTypes = {\n  id: PropTypes.string,\n  options: PropTypes.object,\n  className: PropTypes.string,\n  eventListeners: PropTypes.arrayOf(PropTypes.object),\n  playingState: PropTypes.oneOf([lottieConstants.PLAY, lottieConstants.PAUSE, lottieConstants.STOP]),\n  direction: PropTypes.oneOf([lottieConstants.directionForward, lottieConstants.directionReverse]),\n  speed: PropTypes.number,\n  goToAndPlay: PropTypes.object,\n  playSegments: PropTypes.object\n}\n\nfunction Lottie(props) {\n\n  const { id, options, eventListeners, playingState, className, direction, speed, goToAndPlay, playSegments } = props\n  const [lottieInstance, setLottieInstance] = useState(null)\n  const [lottieConfig, setLottieConfig] = useState(null)\n  const lottieContainer = useRef(null)\n  const [isAnimationMissing, setAnimationMissing] = useState(false)\n  const [lottieOptions, dispatch] = useReducer(setLottieOptions, {})\n\n\n  function setLottieOptions(state, action) {\n    //useReducer is required to compare incoming props with previous props\n    //useEffect is rendered with every state change and compares changes in props by both reference and value\n    //We need to update lottieOptions only when the options have changed by value so that we can can create a lottie instance only when there is a change in options\n    let isOptionsChanged = !lottieConstants.checkObjectsEqualByValue(action.newOptions, state)\n    if (isOptionsChanged) {\n      if (!action.newOptions.path && !action.newOptions.animationData) {\n        setAnimationMissing(true)\n      }\n      else {\n        setAnimationMissing(false)\n      }\n      if ((state.path || state.animationData) && lottieInstance) {\n        //Before returning options for new instance destroy the previous instance\n        lottieInstance.destroy()\n      }\n      return action.newOptions\n    }\n    else {\n      return state\n    }\n  }\n\n\n  useEffect(() => {\n    dispatch({ newOptions: options })\n  }, [options]\n  )\n\n  useEffect(() => {\n    if (lottieOptions && (lottieOptions.animationData || lottieOptions.path)) {\n      let newConfig = { ...lottieOptions, container: lottieContainer.current }\n      if (newConfig.path) {\n        //If path defined then ignore animationData provided\n        delete newConfig.animationData\n      }\n      setLottieConfig(newConfig)\n    }\n  }, [lottieOptions]\n  )\n\n  //Initialise animation\n  useEffect(() => {\n    if (lottieConfig && lottieConfig.container) {\n      const newInstance = lottie.loadAnimation(lottieConfig)\n      setLottieInstance(newInstance)\n    }\n  }, [lottieConfig])\n\n\n  // Remove listeners if any added when initialised\n  const removeEventListeners = useCallback(\n    () => {\n      if (lottieInstance) {\n        eventListeners.forEach((eventListener) => {\n          lottieInstance.removeEventListener(eventListener.eventName, eventListener.callback)\n        })\n        //Destroy lottieInstance once all listeners have been removed\n        return () => lottieInstance.destroy()\n      }\n    },\n    [lottieInstance, eventListeners],\n  )\n\n  // Add listeners if any passed to props\n  const addEventListeners = useCallback(\n    () => {\n      if (lottieInstance && eventListeners) {\n        eventListeners.forEach((eventListener) => {\n          lottieInstance.addEventListener(eventListener.eventName, eventListener.callback)\n        })\n      }\n    },\n    [eventListeners, lottieInstance],\n  )\n\n  useEffect(() => {\n    addEventListeners()\n    //Equivalent to component will unmount.\n    return () => removeEventListeners()\n  },\n  )\n\n\n  //Watch for state change of animation\n  useEffect(() => {\n    if (lottieInstance) {\n      if (playingState === lottieConstants.PLAY) {\n        lottieInstance.play()\n      }\n      else if (playingState === lottieConstants.PAUSE) {\n        lottieInstance.pause()\n      }\n      else if (playingState === lottieConstants.STOP) {\n        lottieInstance.stop()\n      }\n    }\n  }, [playingState, lottieInstance]\n  )\n\n  //Watch direction change\n  useEffect(() => {\n    if (lottieInstance && direction && (direction === lottieConstants.directionForward || lottieConstants.directionReverse)) {\n      lottieInstance.setDirection(direction)\n    }\n  }, [direction, lottieInstance]\n  )\n\n  //Watch speed change\n  useEffect(() => {\n    if (lottieInstance && speed) {\n      lottieInstance.setSpeed(speed)\n    }\n  }, [speed, lottieInstance]\n  )\n\n  //Jump to play from specific time/segment\n  useEffect(() => {\n    if (lottieInstance && goToAndPlay && goToAndPlay.value && goToAndPlay.isFrame) {\n      lottieInstance.goToAndPlay(goToAndPlay.value, goToAndPlay.isFrame)\n    }\n  }, [goToAndPlay, lottieInstance]\n  )\n\n  //Play specific segments\n  useEffect(() => {\n    if (lottieInstance && playSegments && playSegments.segments && playSegments.forceFlag) {\n      lottieInstance.goToAndPlay(playSegments.segments, playSegments.forceFlag)\n    }\n  }, [playSegments, lottieInstance]\n  )\n\n  //Container for animation\n  return (\n    <div id={id} ref={lottieContainer} className={className}>\n      {isAnimationMissing && <p>{lottieConstants.animationMissing}</p>}\n    </div>\n  )\n}\n\nconst defaultOptions = {\n  renderer: 'svg',\n  loop: false,\n  autoplay: false,\n  animationData: animationData, // the animation data\n  rendererSettings: {\n    preserveAspectRatio: 'xMinYMin slice', // Supports the same options as the svg element's preserveAspectRatio property\n  }\n}\n\nLottie.propTypes = propTypes\nLottie.defaultProps = {\n  id: uuid4(),\n  options: defaultOptions,\n  eventListeners: [],\n  playingState: lottieConstants.STOP,\n  direction: 1,\n  speed: 1,\n  goToAndPlay: null,\n  playSegments: null\n}\n\nexport default Lottie","import _ from 'lodash'\n\nexport const animationMissing = 'Looks like you have missed animation . Use animationData to pass a json or use path to pass in url'\n\nexport const PLAY = 'play'\nexport const PAUSE = 'pause'\nexport const STOP = 'stop'\nexport const directionForward = 1\nexport const directionReverse = -1\n\nexport const checkObjectsEqualByValue = (object1, object2) => {\n  //Find all keys of object1 since comparing object with object1 is enough to validate equality\n  //For every key find if object 2 has the same key and then compare with the value of object1 for that key.\n  //For nested objects recursively check equality\n  let is_equal = true\n  const object_keys = _.keys(object1)\n  for (let i = 0; i < object_keys.length; i++) {\n    let key = object_keys[i]\n    if (_.has(object2, key)) {\n      if (_.isObject(object2[key])) {\n        return checkObjectsEqualByValue(object1[key], object2[key])\n      }\n      else if (object1[key] !== object2[key]) {\n        return false\n      }\n    }\n    else {\n      return false\n    }\n  }\n  return is_equal\n}","export const globeLottieExampleOptions = {\n  renderer: 'svg',\n  loop: true,\n  autoplay: false,\n  path: 'https://assets7.lottiefiles.com/datafiles/wW9k6ALg5Mn9cIj/data.json',  //the link from lottie files also can be used\n  animationData: null,\n  rendererSettings: {\n    preserveAspectRatio: 'xMinYMin slice',  //Supports the same options as the svg element's preserveAspectRatio property\n  }\n}\n\nexport const renderer ='svg'\nexport const rendererSettings = {\n  preserveAspectRatio: 'xMinYMin slice',  //Supports the same options as the svg element's preserveAspectRatio property\n}","import React, { useState } from 'react'\nimport Lottie from '../lottie'\nimport './demo.css'\nimport * as demoConstants from './demoConstants'\nlet watchAnimationData = require('./stopwatch.json')\n\nfunction Demo() {\n  const [playingState, setPlayingState] = useState('play')\n  const [loopCounter, setLoopCounter] = useState(0)\n  const [autoplay, setAutoplay] = useState(false)\n  const [loop, setLoop] = useState(true)\n  const [path, setPath] = useState('https://assets2.lottiefiles.com/datafiles/zc3XRzudyWE36ZBJr7PIkkqq0PFIrIBgp4ojqShI/newAnimation.json')\n  const [animationData, setAnimationData] = useState(watchAnimationData)\n  const [speed, setSpeed] = useState(1)\n  const [direction, setDirection] = useState(1)\n\n  return (\n    <div className='demo'>\n      <h1>Lottie animations</h1>\n      <h2>Props playground</h2>\n      <div className='props-playground-container'>\n        <div className='props-list'>\n          <h4>playingState</h4>\n          <div>\n            <button onClick={() => setPlayingState('play')}>Play</button>\n            <button onClick={() => setPlayingState('pause')}>Pause</button>\n            <button onClick={() => setPlayingState('stop')}>Stop</button>\n          </div>\n          <h4>autoplay</h4>\n          <label className='switch'>\n            <input type='checkbox' checked={autoplay} onChange={() => setAutoplay(!autoplay)} />\n            <span className='slider round'></span>\n          </label>\n          <h4>loop</h4>\n          <label className='switch'>\n            <input type='checkbox' checked={loop} onChange={() => setLoop(!loop)} />\n            <span className='slider round'></span>\n          </label>\n          <h4>path</h4>\n          <input className='input' value={path} onChange={(e) => setPath(e.target.value)} />\n          <h4>animationData</h4>\n          <textarea\n            className='json-text'\n            value={JSON.stringify(animationData)}\n            onChange={(e) => e.target.value && setAnimationData(JSON.parse(e.target.value))\n            } />\n          <h4>speed</h4>\n          <input className='input' value={speed} onChange={(e) => setSpeed(e.target.value)} />\n          <h4>direction</h4>\n          <input\n            type='number'\n            className='input'\n            value={direction}\n            maxLength={1}\n            min='-1'\n            max='1'\n            onChange={(e) => setDirection(e.target.value)} />\n        </div>\n        <div>\n          <Lottie\n            options={{\n              renderer: demoConstants.renderer,\n              loop: loop,\n              autoplay: autoplay,\n              path: path,\n              animationData: animationData,\n              rendererSettings: demoConstants.rendererSettings\n            }}\n            playingState={playingState}\n            speed={speed}\n            direction={direction}\n          />\n        </div>\n      </div>\n      <h2 font='medium'>Easy to add event listeners</h2>\n      <div className='events-example'>\n        <h3 className='events-counter'>Loop count : {loopCounter}</h3>\n        <Lottie\n          className='lottie-event-callback'\n          options={demoConstants.globeLottieExampleOptions}\n          playingState={'play'}\n          eventListeners={[{\n            eventName: 'loopComplete',\n            callback: () => { setLoopCounter(loopCounter + 1) }\n          }]}\n        />\n      </div>\n    </div>\n\n  )\n}\n\nexport default Demo","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Demo from './demo/demo'\n\n/**\n *\n * This component is not exported from the library.\n */\nfunction AppHook() {\n\n  return (\n    <Demo />\n  )\n}\nexport default AppHook\n\nReactDOM.render(<AppHook />, document.getElementById('root'))\n"],"sourceRoot":""}